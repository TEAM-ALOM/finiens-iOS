//
//  LocationSearchView.swift
//  antenna
//
//  Created by 이소리 on 2023/07/24.
//

import SwiftUI
import ComposableArchitecture

struct LocationSearchState: Equatable {
    var showLocationSearchView: Bool //false
}

enum LocationSearchAction: Equatable {
    case locationSearchBarTapped
    case locationSearchViewDismissed
}

let locationSearchReducer = Reducer<LocationSearchState, LocationSearchAction, MapStore> { state, action, environment in
    switch action {
    case .locationSearchBarTapped:
        state.showLocationSearchView = true
        return .none
    case .locationSearchViewDismissed:
        state.showLocationSearchView = false
        return .none
    }
}

struct LocationSearchView: View {
    let store: LocationSearchStore<LocationSearchState, LocationSearchAction>

    var body: some view {
        WithViewStore(self.store) { viewStore in
            // UI
            
            if viewStore.showLocationSearchView {
                LocationSearchView(store: self.store.scope(
                    state: { $0 },
                    action: LocationSearchAction.locationSearchViewDismissed
                ))
                .fullScreenCover(isPresented: viewStore.binding(
                    get: \.showLocationSearchView,
                    send: LocationSearchAction.locationSearchViewDismissed))
            }
        }
    }
}

let initialLocationSearchState = LocationSearchState(showLocationSearchView: true)

let locationSearchStore = Store(
    initialState: initialLocationSearchState,
    reducer: locationSearchReducer,
    environment: ()
)
